name: Pipeline Qualité Eau - CI/CD

on:
  workflow_dispatch: {}
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ============================================================
  # JOB 1 : INGESTION LOCALE (GitHub Actions)
  # ============================================================
  ingestion-local:
    name: "📥 Étape 1 - Ingestion Locale"
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📚 Installation des dépendances
        run: |
          echo "================================"
          echo "📚 INSTALLATION DES DÉPENDANCES"
          echo "================================"
          
          python -m pip install --upgrade pip
          
          # Installation des dépendances du projet
          if [ -f requirements.txt ]; then
            echo "📄 Installation depuis requirements.txt"
            pip install -r requirements.txt
          fi
          
          # Installation des dépendances Azure (obligatoires)
          echo "☁️  Installation des packages Azure"
          pip install azure-storage-blob azure-identity azure-core
          
          # Installation de papermill pour exécuter les notebooks
          echo "📓 Installation de papermill"
          pip install papermill nbformat nbconvert jupyter
          
          # Installation de python-dotenv si nécessaire
          pip install python-dotenv
          
          echo "✅ Toutes les dépendances sont installées"
          
          # Afficher les packages installés
          echo ""
          echo "📋 Packages Azure installés :"
          pip list | grep azure

      - name: 🔐 Configuration des variables d'environnement
        run: |
          echo "================================"
          echo "🔐 CONFIGURATION DES SECRETS"
          echo "================================"
          
          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "CONTAINER_RAW=${{ secrets.CONTAINER_RAW }}" >> $GITHUB_ENV
          echo "CONTAINER_BRONZE=${{ secrets.CONTAINER_BRONZE }}" >> $GITHUB_ENV
          
          echo "✅ Variables d'environnement configurées"
          echo "📊 Storage Account: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
          echo "📊 Container Raw: ${{ secrets.CONTAINER_RAW }}"

      - name: 📝 Vérification du notebook
        run: |
          echo "================================"
          echo "📝 VÉRIFICATION DU NOTEBOOK"
          echo "================================"
          
          if [ ! -f "00_qualite_eau_ingestion.ipynb" ]; then
            echo "❌ Le fichier 00_qualite_eau_ingestion.ipynb n'existe pas"
            exit 1
          fi
          
          echo "✅ Notebook trouvé : 00_qualite_eau_ingestion.ipynb"
          
          # Afficher la structure du notebook
          python3 << EOF
          import json
          with open('00_qualite_eau_ingestion.ipynb', 'r', encoding='utf-8') as f:
              nb = json.load(f)
              print(f"📊 Nombre de cellules : {len(nb['cells'])}")
              print(f"📊 Kernel : {nb['metadata'].get('kernelspec', {}).get('name', 'N/A')}")
          EOF

      - name: 🚀 Exécution du notebook d'ingestion
        run: |
          echo "================================"
          echo "📥 ÉTAPE 1 : INGESTION DES DONNÉES"
          echo "================================"
          
          # Exporter les variables pour le notebook
          export AZURE_STORAGE_ACCOUNT_NAME="${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
          export AZURE_STORAGE_ACCOUNT_KEY="${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}"
          export AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"
          export CONTAINER_RAW="${{ secrets.CONTAINER_RAW }}"
          export CONTAINER_BRONZE="${{ secrets.CONTAINER_BRONZE }}"
          
          # Exécuter le notebook avec papermill (SANS paramètres)
          papermill \
            00_qualite_eau_ingestion.ipynb \
            00_qualite_eau_ingestion_output.ipynb \
            --log-output \
            --progress-bar \
            --request-save-on-cell-execute
          
          echo ""
          echo "✅ Ingestion terminée avec succès"

      - name: 📊 Vérification des résultats
        if: success()
        run: |
          echo "================================"
          echo "📊 VÉRIFICATION DES RÉSULTATS"
          echo "================================"
          
          echo "✅ Notebook exécuté : 00_qualite_eau_ingestion.ipynb"
          echo "📄 Output généré : 00_qualite_eau_ingestion_output.ipynb"
          
          # Vérifier que le fichier output existe
          if [ -f "00_qualite_eau_ingestion_output.ipynb" ]; then
            echo "✅ Fichier output créé avec succès"
            
            # Afficher un résumé du notebook exécuté
            python3 << EOF
          import json
          with open('00_qualite_eau_ingestion_output.ipynb', 'r', encoding='utf-8') as f:
              nb = json.load(f)
              cells_executed = sum(1 for cell in nb['cells'] if cell.get('execution_count'))
              print(f"📊 Cellules exécutées : {cells_executed}/{len(nb['cells'])}")
          EOF
          else
            echo "⚠️  Fichier output non trouvé"
          fi

      - name: 💾 Upload du notebook exécuté (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: notebook-ingestion-output
          path: |
            00_qualite_eau_ingestion_output.ipynb
            *.log
          retention-days: 7

      - name: 📋 Affichage des logs en cas d'erreur
        if: failure()
        run: |
          echo "================================"
          echo "📋 LOGS D'ERREUR"
          echo "================================"
          
          if [ -f "00_qualite_eau_ingestion_output.ipynb" ]; then
            echo "📄 Extraction des erreurs du notebook..."
            
            python3 << EOF
          import json
          with open('00_qualite_eau_ingestion_output.ipynb', 'r', encoding='utf-8') as f:
              nb = json.load(f)
              for i, cell in enumerate(nb['cells'], 1):
                  if cell.get('cell_type') == 'code':
                      outputs = cell.get('outputs', [])
                      for output in outputs:
                          if output.get('output_type') == 'error':
                              print(f"\n❌ ERREUR dans la cellule {i}:")
                              print(f"   Type: {output.get('ename', 'N/A')}")
                              print(f"   Message: {output.get('evalue', 'N/A')}")
                              traceback = output.get('traceback', [])
                              if traceback:
                                  print("   Traceback:")
                                  for line in traceback:
                                      print(f"   {line}")
          EOF
          fi

      - name: ❌ Gestion des erreurs
        if: failure()
        run: |
          echo ""
          echo "================================"
          echo "❌ ERREUR LORS DE L'INGESTION"
          echo "================================"
          echo ""
          echo "📄 Consultez les logs ci-dessus pour plus de détails"
          echo "💡 Vérifiez :"
          echo "   - Les credentials Azure sont corrects"
          echo "   - Le container existe"
          echo "   - Les permissions sont configurées"
          echo ""
          exit 1

      - name: ✅ Résumé de l'exécution
        if: success()
        run: |
          echo ""
          echo "================================"
          echo "✅ INGESTION TERMINÉE AVEC SUCCÈS"
          echo "================================"
          echo ""
          echo "📊 Résumé :"
          echo "   ✅ Notebook exécuté : 00_qualite_eau_ingestion.ipynb"
          echo "   ✅ Output disponible : 00_qualite_eau_ingestion_output.ipynb"
          echo "   ✅ Artifacts uploadés : notebook-ingestion-output"
          echo ""
          echo "🎉 Étape 1 du pipeline complétée !"
          echo "================================"