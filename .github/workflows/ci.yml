name: Pipeline Qualit√© Eau - CI/CD
on:
  workflow_dispatch: {}

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ============================================================
  # JOB 1 : INGESTION LOCALE (GitHub Actions)
  # ============================================================
  ingestion-local:
    name: "üì• √âtape 1 - Ingestion Locale"
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout du code
        uses: actions/checkout@v4

      - name: üêç Configuration Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üìö Installation des d√©pendances
        run: |
          echo "================================"
          echo "üìö INSTALLATION DES D√âPENDANCES"
          echo "================================"

          python -m pip install --upgrade pip

          if [ -f requirements.txt ]; then
            echo "üìÑ Installation depuis requirements.txt"
            pip install -r requirements.txt
          fi

          echo "‚òÅÔ∏è Installation des packages Azure"
          pip install azure-storage-blob azure-identity azure-core

          echo "üìì Installation de papermill"
          pip install papermill nbformat nbconvert jupyter

          pip install python-dotenv

          echo "‚úÖ Toutes les d√©pendances sont install√©es"
          pip list | grep azure

      - name: üîê Configuration des variables d'environnement
        run: |
          echo "================================"
          echo "üîê CONFIGURATION DES SECRETS"
          echo "================================"

          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "CONTAINER_RAW=${{ secrets.CONTAINER_RAW }}" >> $GITHUB_ENV
          echo "CONTAINER_BRONZE=${{ secrets.CONTAINER_BRONZE }}" >> $GITHUB_ENV

          echo "‚úÖ Variables d'environnement configur√©es"

      - name: üìù V√©rification du notebook
        run: |
          echo "================================"
          echo "üìù V√âRIFICATION DU NOTEBOOK"
          echo "================================"

          if [ ! -f "00_qualite_eau_ingestion.ipynb" ]; then
            echo "‚ùå Le fichier 00_qualite_eau_ingestion.ipynb n'existe pas"
            exit 1
          fi

          echo "‚úÖ Notebook trouv√© : 00_qualite_eau_ingestion.ipynb"

      - name: üöÄ Ex√©cution du notebook d'ingestion
        run: |
          echo "================================"
          echo "üì• √âTAPE 1 : INGESTION DES DONN√âES"
          echo "================================"

          export AZURE_STORAGE_ACCOUNT_NAME="${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
          export AZURE_STORAGE_ACCOUNT_KEY="${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}"
          export AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"
          export CONTAINER_RAW="${{ secrets.CONTAINER_RAW }}"
          export CONTAINER_BRONZE="${{ secrets.CONTAINER_BRONZE }}"

          papermill \
            00_qualite_eau_ingestion.ipynb \
            00_qualite_eau_ingestion_output.ipynb \
            --log-output \
            --progress-bar \
            --request-save-on-cell-execute

          echo "‚úÖ Ingestion termin√©e avec succ√®s"

      - name: üìä V√©rification des r√©sultats
        if: success()
        run: |
          echo "================================"
          echo "üìä V√âRIFICATION DES R√âSULTATS"
          echo "================================"

          if [ -f "00_qualite_eau_ingestion_output.ipynb" ]; then
            echo "‚úÖ Fichier output cr√©√© avec succ√®s"
          else
            echo "‚ö†Ô∏è Fichier output non trouv√©"
          fi

      - name: üíæ Upload du notebook ex√©cut√© (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: notebook-ingestion-output
          path: |
            00_qualite_eau_ingestion_output.ipynb
            *.log
          retention-days: 7

      - name: ‚úÖ R√©sum√© de l'ex√©cution
        if: success()
        run: |
          echo ""
          echo "================================"
          echo "‚úÖ INGESTION TERMIN√âE AVEC SUCC√àS"
          echo "================================"
          echo ""
          echo "üìä R√©sum√© :"
          echo "   ‚úÖ Notebook ex√©cut√© : 00_qualite_eau_ingestion.ipynb"
          echo "   ‚úÖ Output disponible : 00_qualite_eau_ingestion_output.ipynb"
          echo "   ‚úÖ Artifacts upload√©s : notebook-ingestion-output"
          echo ""
          echo "üéâ √âtape 1 du pipeline compl√©t√©e !"
          echo "================================"

  # ============================================================
  # JOB 2 : TRANSFORMATION RAW ‚Üí BRONZE (Azure Databricks)
  # ============================================================
  transformation-raw-bronze:
    name: "üîÑ √âtape 2 - Transformation RAW ‚Üí BRONZE"
    needs: ingestion-local
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout du code
        uses: actions/checkout@v4

      - name: üîê Configuration des variables d'environnement
        run: |
          echo "================================"
          echo "üîê CONFIGURATION DES SECRETS"
          echo "================================"

          echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST }}" >> $GITHUB_ENV
          echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN }}" >> $GITHUB_ENV

          echo "‚úÖ Variables d'environnement configur√©es"

      - name: üöÄ Ex√©cution du notebook de transformation RAW ‚Üí BRONZE
        run: |
          echo "================================"
          echo "üîÑ √âTAPE 2 : TRANSFORMATION RAW ‚Üí BRONZE"
          echo "================================"

          # Utiliser l'API Databricks pour ex√©cuter le notebook
          response=$(curl -X POST \
            -H "Authorization: Bearer ${{ secrets.DATABRICKS_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.DATABRICKS_HOST }}/api/2.0/jobs/runs/submit" \
            -d '{
              "run_name": "Transformation RAW ‚Üí BRONZE",
              "new_cluster": {
                "cluster_name": "Jonathan IMPE'\''s Cluster credential",
                "spark_version": "10.4.x-scala2.12",
                "node_type_id": "Standard_DS3_v2",
                "num_workers": 2
              },
              "notebook_task": {
                "notebook_path": "/raw_to_bronze_result_and_plv",
                "base_parameters": {}
              }
            }')

          echo "R√©ponse de l'API Databricks : $response"

          run_id=$(echo $response | jq -r '.run_id')

          if [ "$run_id" != "null" ]; then
            echo "‚úÖ Notebook lanc√© avec succ√®s. ID d''ex√©cution : $run_id"
          else
            echo "‚ùå Erreur lors du lancement du notebook"
            exit 1
          fi

      - name: ‚úÖ R√©sum√© de l'ex√©cution
        if: success()
        run: |
          echo ""
          echo "================================"
          echo "‚úÖ TRANSFORMATION RAW ‚Üí BRONZE TERMIN√âE AVEC SUCC√àS"
          echo "================================"
          echo ""
          echo "üìä R√©sum√© :"
          echo "   ‚úÖ Notebook ex√©cut√© : raw_to_bronze_result_and_plv.ipynb"
          echo "   ‚úÖ Ex√©cution d√©clench√©e sur Azure Databricks"
          echo ""
          echo "üéâ √âtape 2 du pipeline compl√©t√©e !"
          echo "================================"
